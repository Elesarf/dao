/*
 * Copyright (c) 2021 Rafael Yumagulov
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick_tap_ms = <100>; };
&mt { quick_tap_ms = <100>; };

/ {
      behaviors {
            td0: tap_dance_0 {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_0";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&mt LWIN LBKT>, <&kp CAPS>;
            };
            td1: tap_dance_1 {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_1";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&kp FSLH>, <&kp BSLH>;
            };
            bsdel: backspace_delete {
                compatible = "zmk,behavior-mod-morph";
                label = "BSPC_DEL";
                #binding-cells = <0>;
                bindings = <&kp BSPC>, <&kp DEL>;
                mods = <(MOD_LSFT)>;
            };
            esctab: escape_tab {
                compatible = "zmk,behavior-mod-morph";
                label = "ESC_TAB";
                #binding-cells = <0>;
                bindings = <&kp ESC>, <&kp TAB>;
                mods = <(MOD_LALT|MOD_LCTL)>;
                keep-mods = <(MOD_LALT|MOD_LCTL)>;
            };
        };

        keymap {
                compatible = "zmk,keymap";

// -----------------------------------------------------------------------------------------
// |  GUI/[ | TAB   |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |  ~       | GUI/] |
//          | SHFT  |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  CTRL/'  |
//          | CTRL  |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |  MINUS   |
//                              | RSE | LOW | LWR |   | LWR | RSE | RSE |

                default_layer { bindings = <

    &td0 &esctab        &kp Q &kp W &kp E &kp R &kp T &kp Y         &kp U   &kp I     &kp O   &kp P    &kp GRAVE      &mt RWIN RBKT
         &mt LSHFT TAB  &kp A &kp S &kp D &kp F &kp G &kp H         &kp J   &kp K     &kp L   &kp SEMI &mt RCTRL SQT
         &kp LCTRL      &kp Z &kp X &kp C &kp V &kp B &kp N         &kp M   &kp COMMA &kp DOT &td1     &kp KP_MINUS
         
                          &mt LALT TAB   &mo LWR     &kp SPACE     &kp RET &mo RSE   &bsdel

                        >; };

// -----------------------------------------------------------------------------------------
// |     |  _  |  F1 |  F2 |  F3 |  F4 |  F5 |   |  F6 |  F7 |  F8 |  F9 | F10 | F11 | F12 |
//       |  +  |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | MINUS  |
//       |  =  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |     |
//                    | GUI |     | SPC |   | ENT |     | ALT |

                lower_layer { bindings = <

   &trans &kp UNDER      &kp F1    &kp F2    &kp F3      &kp F4    &kp F5           &kp F6       &kp F7     &kp F8   &kp F9   &kp F10  &kp F11         &kp F12
          &mt LCTRL PLUS &kp EXCL  &kp AT    &kp HASH    &kp DLLR  &kp PRCNT        &kp CARET    &kp AMPS   &kp STAR &kp LPAR &kp RPAR &mt RCTRL MINUS
          &trans         &kp N1    &kp N2    &kp N3      &kp N4    &kp N5           &kp KP_EQUAL &kp UNDER  &kp PLUS &kp LBRC &kp RBRC &trans
                                             &kp LALT    &trans    &trans           &trans       &mo ADJ    &lt ADJ DEL

                        >; };

// -----------------------------------------------------------------------------------------
// |     | NMLK |  /  |  7  |  8  |  9  |  MINUS  |   | VOLU| HOME| PRSC| PGUP| SCLK| CLCK|     |
//       | CTRL |  *  |  4  |  5  |  6  |  PLUS  |   | MUT | LEFT|  UP | RGHT| INS | APP |
//       |      |  0  |  1  |  2  |  3  |  .  |   | VOLD| END | DOWN| PGDN| PAUS|     |
//                          |     |     | ADJ |   | ADJ |     |     |

                raise_layer { bindings = <
 
   &trans &kp KP_NUM      &kp KP_SLASH    &kp N7 &kp N8 &kp N9 &kp KP_MINUS        &trans       &kp PG_DN   &kp PG_UP &kp PSCRN    &kp SLCK &kp CAPS        &trans
          &mt LCTRL EQUAL &kp KP_MULTIPLY &kp N4 &kp N5 &kp N6 &kp KP_PLUS         &kp LEFT     &kp DOWN    &kp UP    &kp RIGHT &kp INS  &mt RCTRL K_APP
          &trans          &kp KP_N0       &kp N1 &kp N2 &kp N3 &kp KP_DOT          &trans       &trans      &trans    &trans    &trans   &trans
                                                    &trans    &mo ADJ   &lt ADJ RET         &lt ADJ ESC  &trans      &trans

                        >; };


// -----------------------------------------------------------------------------------------
// | RST | BLDR |     |     |     |     |     |   |     |     |     |     |     | BLDR | RST |
//       | BTCLR| BT0 | BT1 | BT2 | BT3 | BT4 |   | BT4 | BT3 | BT2 | BT1 | BT0 | BTCLR|
//       |      |     |     |     |     |     |   |     |     |     |     |     |      |
//                          |     |     |     |   |     |     |     |

                adjust_layer { bindings = <

   &sys_reset &bootloader  &none        &none        &none        &none        &none              &none        &kp C_VOL_DN    &kp C_MUTE        &kp C_VOL_UP &none         &bootloader &sys_reset
              &none        &none        &none        &none        &none        &none              &none        &kp C_PREV      &kp C_PP          &kp C_NEXT   &none         &none
              &bt BT_CLR   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4       &bt BT_SEL 4 &bt BT_SEL 3    &bt BT_SEL 2      &bt BT_SEL 1 &bt BT_SEL 0  &bt BT_CLR
                                                                        &trans &none &trans   &trans &none &trans
                        >; };

        };
};
